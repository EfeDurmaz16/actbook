// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

// Using PostgreSQL via Neon
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  password    String
  email       String?  @unique
  firstName   String?
  lastName    String?
  bio         String?
  avatar      String?
  location    String?
  interests   String[]
  isActive    Boolean  @default(true)
  lastSeen    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  intents     Intent[]
  sentConnections     Connection[] @relation("ConnectionRequester")
  receivedConnections Connection[] @relation("ConnectionReceiver")
  activities  Activity[]
  notifications Notification[]
}

model Intent {
  id          String   @id @default(cuid())
  text        String
  category    String?
  location    String?
  tags        String[]
  isActive    Boolean  @default(true)
  embedding   String?  // For semantic search
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Connection {
  id          String           @id @default(cuid())
  status      ConnectionStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  requester   User             @relation("ConnectionRequester", fields: [requesterId], references: [id])
  requesterId String
  receiver    User             @relation("ConnectionReceiver", fields: [receiverId], references: [id])
  receiverId  String
  
  @@unique([requesterId, receiverId])
}

model Activity {
  id          String      @id @default(cuid())
  type        ActivityType
  title       String
  description String?
  location    String?
  dateTime    DateTime?
  maxParticipants Int?
  currentParticipants String[] // User IDs
  tags        String[]
  isActive    Boolean     @default(true)
  embedding   String?     // For semantic search
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  creator     User        @relation(fields: [creatorId], references: [id])
  creatorId   String
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json?            // Additional data like connection request ID, etc.
  createdAt DateTime         @default(now())
  
  user      User             @relation(fields: [userId], references: [id])
  userId    String
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum ActivityType {
  SPORTS
  DINING
  ENTERTAINMENT
  SOCIAL
  LEARNING
  TRAVEL
  WORK
  OTHER
}

enum NotificationType {
  CONNECTION_REQUEST
  CONNECTION_ACCEPTED
  ACTIVITY_INVITATION
  ACTIVITY_UPDATE
  GENERAL
}
